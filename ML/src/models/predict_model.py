import pickle
import pandas as pd
from data_preprocess import process_data
import numpy as np
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
import itertools
from sklearn.metrics import accuracy_score, confusion_matrix
from TrainingAlgorithms import ClassificationAlgorithms
from sensor_input_df import sensor_data_to_df



def predict_model():

    random_forest_model = pickle.load(open("random_forest_model.pkl", "rb"))

    # --------------------------------------------------------------
    # Load data and preprocess data
    # --------------------------------------------------------------
    sensor_data = {'gyro': {'x': [-1.213740458015267, -1.6030534351145038, -1.6030534351145038, -1.7557251908396947, -2.0610687022900764, 250.12977099236642, 37.32824427480916, 250.12977099236642, -250.13740458015266, -202.77862595419847, -93.90839694656489, 30.770992366412212, -1.4885496183206106, -5.1679389312977095, -3.427480916030534, -2.732824427480916, -2.7251908396946565, -2.4656488549618323], 'y': [-0.1450381679389313, -0.25190839694656486, -0.5267175572519084, 0.22900763358778625, 1.900763358778626, 99.97709923664122, 250.12977099236642, -250.13740458015266, 250.12977099236642, 250.12977099236642, 99.5114503816794, 18.81679389312977, -1.7404580152671756, 0.5725190839694656, -0.12213740458015267, 0.5114503816793893, 0.2748091603053435, 0.3053435114503817], 'z': [1.549618320610687, -0.4580152671755725, -0.3816793893129771, 0.022900763358778626, -0.6106870229007634, 151.38167938931298, 250.12977099236642, -250.13740458015266, 250.12977099236642, 250.12977099236642, -250.13740458015266, 66.3206106870229, -0.32061068702290074, -2.633587786259542, -2.0916030534351147, -0.8396946564885496, -1.16793893129771, -0.29770992366412213]}, 'accel': {'x': [7.275978845214843, 7.184999182128906, 7.067683300781249, 7.4770917846679685, 7.323862878417969, 19.61270144958496, -19.6133, 19.61270144958496, 19.61270144958496, 1.0414777221679687, -5.679046337890624, 5.95677373046875, 6.023811376953125, 6.320692382812499, 6.411672045898437, 6.045359191894531, 6.48589229736328, 6.179434484863281], 'y': [-2.051830822753906, -2.061407629394531, -2.109291662597656, -2.001552587890625, -2.2936451904296873, -17.20473312988281, 19.61270144958496, -8.33182177734375, 17.57104598388672, -19.091364038085935, -4.11802685546875, -2.961627453613281, -3.0885201416015624, -2.712630480957031, -2.6479870361328124, -2.6503812377929687, -2.5139117431640625, -2.4205378784179685], 'z': [-6.744466076660156, -6.768408093261718, -6.806715319824218, -6.828263134765624, -6.833051538085937, -16.75222901611328, -19.6133, -19.6133, -19.6133, -7.058106494140625, -1.5682020874023437, -7.582436657714843, -7.551312036132812, -7.52737001953125, -7.860164050292968, -7.582436657714843, -7.764395983886718, -7.659051110839843]}}
    sensor_df = sensor_data_to_df(sensor_data)
    
    processed_df = process_data(sensor_df)
    processed_df = processed_df.drop(columns=["participant", "category", "set", "label"], axis=1)


    y_preds = random_forest_model.predict(processed_df)
    return y_preds

